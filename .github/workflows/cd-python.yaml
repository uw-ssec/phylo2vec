name: CD Python

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
  release:
    types:
      - published

permissions:
  contents: read

env:
  MATURIN_MANIFEST_PATH: ./py-phylo2vec/Cargo.toml

jobs:
  # Update version with timestamp
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install dependencies
        run: pip install tomli
      - name: Determine and set version
        id: set-version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            # Extract version from tag (removing 'v' prefix if present)
            TAG_VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_VERSION#v}
            echo "Version from release tag: $VERSION"

            # Use the update_python_version.py script with the release version
            python resources/update_python_version.py $VERSION
          else
            # Run the script without parameters to use timestamp versioning
            python resources/update_python_version.py
          fi

          # Get the updated version from Cargo.toml
          VERSION=$(grep -m 1 'version =' py-phylo2vec/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Updated version to $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  linux:
    needs: update-version
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ${{ env.MATURIN_MANIFEST_PATH }}
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    needs: update-version
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ${{ env.MATURIN_MANIFEST_PATH }}
          sccache: 'true'
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    needs: update-version
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ${{ env.MATURIN_MANIFEST_PATH }}
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    needs: update-version
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --manifest-path ${{ env.MATURIN_MANIFEST_PATH }}
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path ${{ env.MATURIN_MANIFEST_PATH }}
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    # Set the PyPI environment,
    # this needs to match the environment
    # set in pypi website
    environment: pypi
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [update-version, linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Log version being published
        run: echo "Publishing version ${{ needs.update-version.outputs.version }} to PyPI"
      - name: Publish to PyPI
        if: "startsWith(github.ref, 'refs/tags/')"
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    # Set the TestPyPI environment,
    # this needs to be configured in repository settings
    environment: testpypi
    # Run only on non-release events (pushes to main/dev or workflow dispatch)
    if: github.event_name != 'release'
    needs: [update-version, linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Log version being published
        run: echo "Publishing version ${{ needs.update-version.outputs.version }} to TestPyPI"
      - name: Publish to TestPyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing --repository-url https://test.pypi.org/legacy/ wheels-*/*
